<?php

namespace App\Http\Controllers\Admin;

use Illuminate\Http\Request;
use App\Http\Controllers\Controller;
use App\Models\$MODEL_NAME_STUDLY_CASE$;
use Auth, Validator, Input, Redirect; 
use App\Helpers\SettingOptions;


class $MODEL_NAME_STUDLY_CASE$Controller extends Controller
{
    private $data = array();
	
	public function __construct(Request $request)
    {
        $this->data['leftNavBar'] = true;
        $this->data['title'][0] =  array('title' => trans('$MODEL_NAME$.admin_$MODEL_NAME$_module_title'),'url'=> 'admin/$MODEL_NAME$');
        $this->data['parent_page'] = 'settings';
        $this->data['current_page'] = $request->segment(2);
		$this->data['icon_class'] = SettingOptions::Options('icon');
		$this->data['color_class'] = SettingOptions::Options('colour');
        $this->models = new $MODEL_NAME_STUDLY_CASE$;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param Request $request
     * @return Response
     */
    public function index(Request $request)
    {
		$this->data['access'] =  $this->models->validAccess(Auth::id());
        if(!isset($this->data['access']['list-$MODEL_NAME_CAMEL$']) && !isset($this->data['access']['all'])){return redirect('accessDenied');}
        $this->data['$MODEL_NAME_PLURAL$'] =  $MODEL_NAME_STUDLY_CASE$::All();
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index',$this->data);
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
		$this->data['access'] =  $this->models->validAccess(Auth::id());
        if(!isset($this->data['access']['create-$MODEL_NAME_CAMEL$']) && !isset($this->data['access']['all'])){return redirect('accessDenied');}
        $this->data['title'][1] =  array('title' => trans('$MODEL_NAME$.admin_$MODEL_NAME$_module_add'),'url'=> '');
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create',$this->data);
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function store(Request $request)
    {
        $input = $request->all();
		
		$findr = new $MODEL_NAME_STUDLY_CASE$;
		$findr->save($input);
		$request->session()->flash('alert-success', trans('$MODEL_NAME$.admin_$MODEL_NAME$_module_add_message'));

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($id)
    {
        $this->data['access'] =  $this->models->validAccess(Auth::id());
        if(!isset($this->data['access']['update-$MODEL_NAME_CAMEL$']) && !isset($this->data['access']['all'])){return redirect('accessDenied');}
        $this->data['title'][1] =  array('title' => trans('$MODEL_NAME$.admin_$MODEL_NAME$_module_edit'),'url'=> '');
        $findr = $MODEL_NAME_STUDLY_CASE$::find($id);
        $this->data['$MODEL_NAME_PLURAL_SNAKE$'] =  $findr;
		
		return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit',$this->data);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int              $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function update($id, Request $request)
    {
		$input = $request->all();
		$findr = $MODEL_NAME_STUDLY_CASE$::find($id);
        $findr->save($input);
        $request->session()->flash('alert-success', trans('$MODEL_NAME$.admin_$MODEL_NAME$_module_update_message'));
		
        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy(Request $request, $id)
    {
		
		$this->data['access'] =  $this->models->validAccess(Auth::id());
        if(!isset($this->data['access']['delete-$MODEL_NAME_CAMEL$']) && !isset($this->data['access']['all'])){return redirect('accessDenied');}
        $MODEL_NAME_STUDLY_CASE$::destroy($id);
        $request->session()->flash('alert-success', trans('$MODEL_NAME$.admin_$MODEL_NAME$_module_delete_message'));
        
        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }
}
